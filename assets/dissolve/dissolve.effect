// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        dissolveTexture: { value: white }
        dissolveThreshold: { value: 0.5, range: [0.0, 1.0] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform sampler2D dissolveTexture;

  uniform dissolveParam {
    float dissolveThreshold;
  };

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    vec4 dissolveColor = texture(dissolveTexture, v_uv0);
    float dissolveAlpha = dissolveColor.r;

    if (dissolveAlpha < dissolveThreshold) {
      discard;
    }

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    if (dissolveAlpha < dissolveThreshold + 0.05) {
      o = vec4(0.9, 0.6, 0.3, o.a);
    }

    gl_FragColor = o;
  }
}%
