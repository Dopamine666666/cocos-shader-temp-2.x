// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  float grainIntensity = 3.25; // 胶卷颗粒强度
  float vigentteIntensity = 0.8; // 暗角强度
  vec3 fadeColor = vec3(0.15, 0.15, 0.05); // 褪色颜色

  // 胶卷颗粒生成函数
  float filmGrain(vec2 coord, float time) {
    return fract(sin(dot(v_uv0 * time, vec2(12.9898, 78.233))) * 43758.5453);
  }

  // 暗角效果
  float vignette(vec2 uv) {
    vec2 center = vec2(0.5, 0.5);
    float dist = distance(uv, center);

    return 1.0 - smoothstep(0.3, 0.8, dist * vigentteIntensity);
  }

  // 胶片曲线
  vec3 filmCurve(vec3 color) {
    vec3 x = color * 1.2;
    vec3 curve = x * (1.0 / (1.0 + exp(-5.0 * ( x - 0.5))));
    return mix(color, curve, 0.7);
  }

  // 色彩分级（橙青色调）
  vec3 filmColorGrade(vec3 color) {
    vec3 shadows = vec3(0.1, 0.25, 0.3);
    vec3 midtones = vec3(0.7, 0.5, 0.3);
    
    // 计算亮度
    float luminance = dot(color, vec3(0.2126, 0.7152, 0.0722));
    vec3 graded = mix(shadows, midtones, smoothstep(0.2, 0.8, luminance));

    return mix(color, graded * color, 0.4);
  }

  // 褪色效果
  vec3 filmFade(vec3 color) {
    return mix(color, fadeColor, 0.15);
  }

  vec4 film(vec4 color, vec2 uv) {
    color.rgb = filmCurve(color.rgb);

    color.rgb = filmColorGrade(color.rgb);

    color.rgb = filmFade(color.rgb);
    
    color.rgb *= vignette(uv);

    float grain = filmGrain(uv, cc_time.x) * grainIntensity;
    color.rgb += (grain - 0.5) * 0.1;

    return color;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    o = film(o, v_uv0);

    gl_FragColor = o;
  }
}%
