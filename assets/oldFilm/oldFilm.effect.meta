{
  "ver": "1.0.27",
  "uuid": "938671f2-fa6d-4b18-845c-865ac34f27b4",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat grainIntensity = 3.25;\nfloat vigentteIntensity = 0.8;\nvec3 fadeColor = vec3(0.15, 0.15, 0.05);\nfloat filmGrain(vec2 coord, float time) {\n  return fract(sin(dot(v_uv0 * time, vec2(12.9898, 78.233))) * 43758.5453);\n}\nfloat vignette(vec2 uv) {\n  vec2 center = vec2(0.5, 0.5);\n  float dist = distance(uv, center);\n  return 1.0 - smoothstep(0.3, 0.8, dist * vigentteIntensity);\n}\nvec3 filmCurve(vec3 color) {\n  vec3 x = color * 1.2;\n  vec3 curve = x * (1.0 / (1.0 + exp(-5.0 * ( x - 0.5))));\n  return mix(color, curve, 0.7);\n}\nvec3 filmColorGrade(vec3 color) {\n  vec3 shadows = vec3(0.1, 0.25, 0.3);\n  vec3 midtones = vec3(0.7, 0.5, 0.3);\n  float luminance = dot(color, vec3(0.2126, 0.7152, 0.0722));\n  vec3 graded = mix(shadows, midtones, smoothstep(0.2, 0.8, luminance));\n  return mix(color, graded * color, 0.4);\n}\nvec3 filmFade(vec3 color) {\n  return mix(color, fadeColor, 0.15);\n}\nvec4 film(vec4 color, vec2 uv) {\n  color.rgb = filmCurve(color.rgb);\n  color.rgb = filmColorGrade(color.rgb);\n  color.rgb = filmFade(color.rgb);\n  color.rgb *= vignette(uv);\n  float grain = filmGrain(uv, cc_time.x) * grainIntensity;\n  color.rgb += (grain - 0.5) * 0.1;\n  return color;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  o = film(o, v_uv0);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat grainIntensity = 3.25;\nfloat vigentteIntensity = 0.8;\nvec3 fadeColor = vec3(0.15, 0.15, 0.05);\nfloat filmGrain(vec2 coord, float time) {\n  return fract(sin(dot(v_uv0 * time, vec2(12.9898, 78.233))) * 43758.5453);\n}\nfloat vignette(vec2 uv) {\n  vec2 center = vec2(0.5, 0.5);\n  float dist = distance(uv, center);\n  return 1.0 - smoothstep(0.3, 0.8, dist * vigentteIntensity);\n}\nvec3 filmCurve(vec3 color) {\n  vec3 x = color * 1.2;\n  vec3 curve = x * (1.0 / (1.0 + exp(-5.0 * ( x - 0.5))));\n  return mix(color, curve, 0.7);\n}\nvec3 filmColorGrade(vec3 color) {\n  vec3 shadows = vec3(0.1, 0.25, 0.3);\n  vec3 midtones = vec3(0.7, 0.5, 0.3);\n  float luminance = dot(color, vec3(0.2126, 0.7152, 0.0722));\n  vec3 graded = mix(shadows, midtones, smoothstep(0.2, 0.8, luminance));\n  return mix(color, graded * color, 0.4);\n}\nvec3 filmFade(vec3 color) {\n  return mix(color, fadeColor, 0.15);\n}\nvec4 film(vec4 color, vec2 uv) {\n  color.rgb = filmCurve(color.rgb);\n  color.rgb = filmColorGrade(color.rgb);\n  color.rgb = filmFade(color.rgb);\n  color.rgb *= vignette(uv);\n  float grain = filmGrain(uv, cc_time.x) * grainIntensity;\n  color.rgb += (grain - 0.5) * 0.1;\n  return color;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  o = film(o, v_uv0);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}