// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        glowColor: { value: [1.0, 0.8, 0.3, 1.0], editor: { type: color } }
        glowSpread: { value: 0.04, editor: { range: [0.0, 0.2], step: 0.05 } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform outlineParam {
    vec4 glowColor;
    float glowSpread;
  };

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    if (o.a > 0.5) {
      gl_FragColor = o;
      return;
    }

    const int DIR_COUNT = 80;
    const int STEP_COUNT = 20;
    float stepSize = glowSpread / float(STEP_COUNT);
    float minDist = glowSpread;

    for (int dir = 0; dir < DIR_COUNT; dir++) {
      // 如果需要实现渐变效果，则需要获取最近非透明像素距离
      // if (minDist < glowSpread) {
      //   break;
      // }

      float angle = 2.0 * 3.1415926 * float(dir) / float(DIR_COUNT);
      vec2 dirVec = vec2(cos(angle), sin(angle));

      for (int s = 1; s <= STEP_COUNT; s++) {
        float dist = float(s) * stepSize;
        vec2 offset = dirVec * dist;
        float a = texture(texture, v_uv0 + offset).a;

        if (a > 0.5) {
          minDist = min(minDist, dist);
          break;
        }
      }
    }

    if (minDist < glowSpread) {
      o = glowColor;
      float glowFactor = smoothstep(glowSpread, 0.0, minDist);
      o *= glowFactor;
    }

    gl_FragColor = o;
  }
}%
