{
  "ver": "1.0.27",
  "uuid": "f1c93e24-381b-4916-87eb-df3c88fa83bd",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 glowColor;\nuniform float glowSpread;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  if (o.a > 0.5) {\n    gl_FragColor = o;\n    return;\n  }\n  const int DIR_COUNT = 80;\n  const int STEP_COUNT = 20;\n  float stepSize = glowSpread / float(STEP_COUNT);\n  float minDist = glowSpread;\n  for (int dir = 0; dir < DIR_COUNT; dir++) {\n    float angle = 2.0 * 3.1415926 * float(dir) / float(DIR_COUNT);\n    vec2 dirVec = vec2(cos(angle), sin(angle));\n    for (int s = 1; s <= STEP_COUNT; s++) {\n      float dist = float(s) * stepSize;\n      vec2 offset = dirVec * dist;\n      float a = texture2D(texture, v_uv0 + offset).a;\n      if (a > 0.5) {\n        minDist = min(minDist, dist);\n        break;\n      }\n    }\n  }\n  if (minDist < glowSpread) {\n    o = glowColor;\n    float glowFactor = smoothstep(glowSpread, 0.0, minDist);\n    o *= glowFactor;\n  }\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform outlineParam {\n  vec4 glowColor;\n  float glowSpread;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  if (o.a > 0.5) {\n    gl_FragColor = o;\n    return;\n  }\n  const int DIR_COUNT = 80;\n  const int STEP_COUNT = 20;\n  float stepSize = glowSpread / float(STEP_COUNT);\n  float minDist = glowSpread;\n  for (int dir = 0; dir < DIR_COUNT; dir++) {\n    float angle = 2.0 * 3.1415926 * float(dir) / float(DIR_COUNT);\n    vec2 dirVec = vec2(cos(angle), sin(angle));\n    for (int s = 1; s <= STEP_COUNT; s++) {\n      float dist = float(s) * stepSize;\n      vec2 offset = dirVec * dist;\n      float a = texture(texture, v_uv0 + offset).a;\n      if (a > 0.5) {\n        minDist = min(minDist, dist);\n        break;\n      }\n    }\n  }\n  if (minDist < glowSpread) {\n    o = glowColor;\n    float glowFactor = smoothstep(glowSpread, 0.0, minDist);\n    o *= glowFactor;\n  }\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}