{
  "ver": "1.0.27",
  "uuid": "d53b238f-bd31-4298-ae40-da5348f13de0",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 textureSize;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec2 pixelSize = 1.0 / textureSize;\n  vec4 topLeft = texture2D(texture, v_uv0 + vec2(-pixelSize.x, pixelSize.y));\n  vec4 topRight = texture2D(texture, v_uv0 + vec2(pixelSize.x, pixelSize.y));\n  vec4 bottomLeft = texture2D(texture, v_uv0 + vec2(-pixelSize.x, -pixelSize.y));\n  vec4 bottomRight = texture2D(texture, v_uv0 + vec2(pixelSize.x, -pixelSize.y));\n  vec4 top = texture2D(texture, v_uv0 + vec2(0.0, pixelSize.y));\n  vec4 bottom = texture2D(texture, v_uv0 + vec2(0.0, -pixelSize.y));\n  vec4 left = texture2D(texture, v_uv0 + vec2(-pixelSize.x, 0.0));\n  vec4 right = texture2D(texture, v_uv0 + vec2(pixelSize.x, 0.0));\n  vec4 gx = -topLeft - 2.0 * left - bottomLeft + topRight + 2.0 * right + bottomRight;\n  vec4 gy = -topLeft - 2.0 * top - topRight + bottomLeft + 2.0 * bottom + bottomRight;\n  float edge = length(vec2(gx.r, gy.r));\n  edge = smoothstep(0.1, 0.3, edge);\n  vec4 finalColor = vec4(vec3(1.0 - min(edge * 5.0, 1.0)), 1.0);\n  gl_FragColor = finalColor;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform outline2Param {\n  vec2 textureSize;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec2 pixelSize = 1.0 / textureSize;\n  vec4 topLeft = texture(texture, v_uv0 + vec2(-pixelSize.x, pixelSize.y));\n  vec4 topRight = texture(texture, v_uv0 + vec2(pixelSize.x, pixelSize.y));\n  vec4 bottomLeft = texture(texture, v_uv0 + vec2(-pixelSize.x, -pixelSize.y));\n  vec4 bottomRight = texture(texture, v_uv0 + vec2(pixelSize.x, -pixelSize.y));\n  vec4 top = texture(texture, v_uv0 + vec2(0.0, pixelSize.y));\n  vec4 bottom = texture(texture, v_uv0 + vec2(0.0, -pixelSize.y));\n  vec4 left = texture(texture, v_uv0 + vec2(-pixelSize.x, 0.0));\n  vec4 right = texture(texture, v_uv0 + vec2(pixelSize.x, 0.0));\n  vec4 gx = -topLeft - 2.0 * left - bottomLeft + topRight + 2.0 * right + bottomRight;\n  vec4 gy = -topLeft - 2.0 * top - topRight + bottomLeft + 2.0 * bottom + bottomRight;\n  float edge = length(vec2(gx.r, gy.r));\n  edge = smoothstep(0.1, 0.3, edge);\n  vec4 finalColor = vec4(vec3(1.0 - min(edge * 5.0, 1.0)), 1.0);\n  gl_FragColor = finalColor;\n}"
      }
    }
  ],
  "subMetas": {}
}