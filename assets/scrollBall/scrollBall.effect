// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        matrixRow0: { value: [1, 0, 0, 0] }
        matrixRow1: { value: [0, 1, 0, 0] }
        matrixRow2: { value: [0, 0, 1, 0] }
        matrixRow3: { value: [0, 0, 0, 1] }
        surfaceTexture: { value: white, editor: { displayName: "表面纹理(球面映射)" } }
        textureScale: { value: 1.0, editor: { displayName: "纹理缩放", range: [0.1, 5.0] } }
        textureOffset: { value: [0.0, 0.0], editor: { displayName: "纹理偏移" } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;

  uniform sampler2D texture;
  uniform sampler2D surfaceTexture;

  uniform mat4Param {
    vec4 matrixRow0;
    vec4 matrixRow1;
    vec4 matrixRow2;
    vec4 matrixRow3;
    vec2 textureOffset;
    float textureScale;
  };

  void main () {
    vec2 xy = v_uv0 * 2.0 - 1.0;
    
    float len = length(xy);
    if (len > 1.0) {
      discard;
    }

    float z = sqrt(1.0 - len * len);
    vec3 spherePos = vec3(xy, z);

    mat4 b_matrix = mat4(matrixRow0, matrixRow1, matrixRow2, matrixRow3);
    vec4 rotatePos = b_matrix * vec4(spherePos, 1.0);
    vec3 p3d = rotatePos.xyz;

    vec4 finalColor;
    if (p3d.z < 0.0) {
      // 背面处理逻辑，暂不处理背面纹理情况
      vec4 originColor = texture2D(texture, v_uv0);
      finalColor = originColor * v_color;
    }
    else {
      // 应用缩放和偏移
      vec2 baseUV = p3d.xy * 0.5 + 0.5;
      vec2 surfaceUV = (baseUV - 0.5) / textureScale + 0.5 + textureOffset;
      
      // 检查UV是否在有效范围内
      bool isInValidRange = surfaceUV.x >= 0.0 && surfaceUV.x <= 1.0 && 
                           surfaceUV.y >= 0.0 && surfaceUV.y <= 1.0;
      
      if (isInValidRange) {
        // UV在有效范围内，采样表面纹理
        vec4 surfaceColor = texture2D(surfaceTexture, surfaceUV);
        if (surfaceColor.a > 0.1) {
          finalColor = surfaceColor * v_color;
        } else {
          vec4 originColor = texture2D(texture, baseUV);
          finalColor = originColor * v_color;
        }
      } else {
        // UV超出范围，直接使用原始球面纹理
        vec4 originColor = texture2D(texture, baseUV);
        finalColor = originColor * v_color;
      }
    }




    ALPHA_TEST(finalColor);

    float alpha = smoothstep(1.0, 0.9, len);
    finalColor.a *= alpha;

    gl_FragColor = finalColor;
  }
}%
