{
  "ver": "1.0.27",
  "uuid": "c541cdf8-5834-4a1b-993c-3194fb0aef98",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D surfaceTexture;\nuniform vec4 matrixRow0;\nuniform vec4 matrixRow1;\nuniform vec4 matrixRow2;\nuniform vec4 matrixRow3;\nuniform vec2 textureOffset;\nuniform float textureScale;\nvoid main () {\n  vec2 xy = v_uv0 * 2.0 - 1.0;\n  float len = length(xy);\n  if (len > 1.0) {\n    discard;\n  }\n  float z = sqrt(1.0 - len * len);\n  vec3 spherePos = vec3(xy, z);\n  mat4 b_matrix = mat4(matrixRow0, matrixRow1, matrixRow2, matrixRow3);\n  vec4 rotatePos = b_matrix * vec4(spherePos, 1.0);\n  vec3 p3d = rotatePos.xyz;\n  vec4 finalColor;\n  if (p3d.z < 0.0) {\n    vec4 originColor = texture2D(texture, v_uv0);\n    finalColor = originColor * v_color;\n  }\n  else {\n    vec2 baseUV = p3d.xy * 0.5 + 0.5;\n    vec2 surfaceUV = (baseUV - 0.5) / textureScale + 0.5 + textureOffset;\n    bool isInValidRange = surfaceUV.x >= 0.0 && surfaceUV.x <= 1.0 &&\n                         surfaceUV.y >= 0.0 && surfaceUV.y <= 1.0;\n    if (isInValidRange) {\n      vec4 surfaceColor = texture2D(surfaceTexture, surfaceUV);\n      if (surfaceColor.a > 0.1) {\n        finalColor = surfaceColor * v_color;\n      } else {\n        vec4 originColor = texture2D(texture, baseUV);\n        finalColor = originColor * v_color;\n      }\n    } else {\n      vec4 originColor = texture2D(texture, baseUV);\n      finalColor = originColor * v_color;\n    }\n  }\n  ALPHA_TEST(finalColor);\n  float alpha = smoothstep(1.0, 0.9, len);\n  finalColor.a *= alpha;\n  gl_FragColor = finalColor;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D surfaceTexture;\nuniform mat4Param {\n  vec4 matrixRow0;\n  vec4 matrixRow1;\n  vec4 matrixRow2;\n  vec4 matrixRow3;\n  vec2 textureOffset;\n  float textureScale;\n};\nvoid main () {\n  vec2 xy = v_uv0 * 2.0 - 1.0;\n  float len = length(xy);\n  if (len > 1.0) {\n    discard;\n  }\n  float z = sqrt(1.0 - len * len);\n  vec3 spherePos = vec3(xy, z);\n  mat4 b_matrix = mat4(matrixRow0, matrixRow1, matrixRow2, matrixRow3);\n  vec4 rotatePos = b_matrix * vec4(spherePos, 1.0);\n  vec3 p3d = rotatePos.xyz;\n  vec4 finalColor;\n  if (p3d.z < 0.0) {\n    vec4 originColor = texture2D(texture, v_uv0);\n    finalColor = originColor * v_color;\n  }\n  else {\n    vec2 baseUV = p3d.xy * 0.5 + 0.5;\n    vec2 surfaceUV = (baseUV - 0.5) / textureScale + 0.5 + textureOffset;\n    bool isInValidRange = surfaceUV.x >= 0.0 && surfaceUV.x <= 1.0 &&\n                         surfaceUV.y >= 0.0 && surfaceUV.y <= 1.0;\n    if (isInValidRange) {\n      vec4 surfaceColor = texture2D(surfaceTexture, surfaceUV);\n      if (surfaceColor.a > 0.1) {\n        finalColor = surfaceColor * v_color;\n      } else {\n        vec4 originColor = texture2D(texture, baseUV);\n        finalColor = originColor * v_color;\n      }\n    } else {\n      vec4 originColor = texture2D(texture, baseUV);\n      finalColor = originColor * v_color;\n    }\n  }\n  ALPHA_TEST(finalColor);\n  float alpha = smoothstep(1.0, 0.9, len);\n  finalColor.a *= alpha;\n  gl_FragColor = finalColor;\n}"
      }
    }
  ],
  "subMetas": {}
}