{
  "ver": "1.0.27",
  "uuid": "8667806d-92cf-436b-be56-65693df0e184",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec4 matrixRow0;\nuniform vec4 matrixRow1;\nuniform vec4 matrixRow2;\nuniform vec4 matrixRow3;\nuniform vec4 lightDirection;\nuniform vec4 overallColor;\nuniform float turbulenceSpeed;\nuniform float turbulenceAmplitude;\nuniform float turbulenceFrequency;\nuniform float turbulenceOctaves;\nuniform float turbulenceExp;\nuniform float turbulenceIntensity;\nuniform float colorIntensity;\nvec2 turbulence(vec2 p)\n{\n    float freq = turbulenceFrequency;\n    mat2 rot = mat2(0.6, -0.8, 0.8, 0.6);\n    for(float i = 0.0; i < 20.0; i++)\n    {\n        if(i >= turbulenceOctaves) break;\n        float phase = freq * (p * rot).y + turbulenceSpeed * cc_time.x + i;\n        p += turbulenceAmplitude * rot[0] * sin(phase) / freq;\n        rot *= mat2(0.6, -0.8, 0.8, 0.6);\n        freq *= turbulenceExp;\n    }\n    return p;\n}\nvec3 rgb2hsv(vec3 rgb) {\n    float cmax = max(rgb.r, max(rgb.g, rgb.b));\n    float cmin = min(rgb.r, min(rgb.g, rgb.b));\n    float delta = cmax - cmin;\n    vec3 hsv = vec3(0.0);\n    if (delta > 0.0) {\n        if (cmax == rgb.r) {\n            hsv.x = mod((rgb.g - rgb.b) / delta, 6.0);\n        } else if (cmax == rgb.g) {\n            hsv.x = (rgb.b - rgb.r) / delta + 2.0;\n        } else {\n            hsv.x = (rgb.r - rgb.g) / delta + 4.0;\n        }\n        hsv.x /= 6.0;\n    }\n    hsv.y = (cmax > 0.0) ? delta / cmax : 0.0;\n    hsv.z = cmax;\n    return hsv;\n}\nvec3 hsv2rgb(vec3 hsv) {\n    float h = hsv.x * 6.0;\n    float s = hsv.y;\n    float v = hsv.z;\n    float c = v * s;\n    float x = c * (1.0 - abs(mod(h, 2.0) - 1.0));\n    float m = v - c;\n    vec3 rgb = vec3(0.0);\n    if (h < 1.0) {\n        rgb = vec3(c, x, 0.0);\n    } else if (h < 2.0) {\n        rgb = vec3(x, c, 0.0);\n    } else if (h < 3.0) {\n        rgb = vec3(0.0, c, x);\n    } else if (h < 4.0) {\n        rgb = vec3(0.0, x, c);\n    } else if (h < 5.0) {\n        rgb = vec3(x, 0.0, c);\n    } else {\n        rgb = vec3(c, 0.0, x);\n    }\n    return rgb + m;\n}\nvec3 generateProceduralColor(vec2 turbulentPos)\n{\n    vec3 baseColor = overallColor.rgb * colorIntensity;\n    vec3 hsv = rgb2hsv(baseColor);\n    float brightness = dot(cos(turbulentPos * 3.0), sin(-turbulentPos.yx * 3.0 * 0.618)) + 2.0;\n    float originalValue = hsv.z;\n    const float brightenRange = 0.15;\n    const float darkenRange = 0.05;\n    float minValue = max(0.1, originalValue - darkenRange);\n    float maxValue = min(1.0, originalValue + brightenRange);\n    float normalizedBrightness = clamp((brightness - 2.0) / 2.0, -1.0, 1.0);\n    float adjustedValue;\n    if (normalizedBrightness >= 0.0) {\n        adjustedValue = originalValue + normalizedBrightness * brightenRange;\n    } else {\n        adjustedValue = originalValue + normalizedBrightness * darkenRange;\n    }\n    hsv.z = clamp(adjustedValue, minValue, maxValue);\n    return hsv2rgb(hsv);\n}\nfloat calculateLighting(vec3 spherePos)\n{\n    vec3 normal = normalize(spherePos);\n    vec3 lightDir = normalize(lightDirection.xyz);\n    float lightIntensity = dot(normal, lightDir);\n    const float ambientLight = 0.2;\n    const float shadowStrength = 1.0;\n    float smoothLighting = smoothstep(-0.2, 0.3, lightIntensity);\n    float finalLighting = ambientLight + smoothLighting * shadowStrength;\n    return finalLighting;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 xy = v_uv0 * 2.0 - 1.0;\n  float len = length(xy);\n  if (len > 1.0) {\n    discard;\n  }\n  float z = sqrt(1.0 - len * len);\n  vec3 spherePos = vec3(xy, z);\n  mat4 b_matrix = mat4(matrixRow0, matrixRow1, matrixRow2, matrixRow3);\n  vec4 rotatePos = b_matrix * vec4(spherePos, 1.0);\n  vec3 p3d = rotatePos.xyz;\n  vec2 centeredCoord = p3d.xy * turbulenceIntensity;\n  vec2 turbulentPos = turbulence(centeredCoord);\n  vec3 proceduralColor = generateProceduralColor(turbulentPos);\n  float lightingFactor = calculateLighting(spherePos);\n  vec3 litColor = proceduralColor * (0.7 + 0.3 * lightingFactor);\n  o = vec4(litColor, 1.0);\n  o *= v_color;\n  ALPHA_TEST(o);\n  float alpha = smoothstep(1.0, 0.9, len);\n  o.a *= alpha;\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform mat4Param {\n  vec4 matrixRow0;\n  vec4 matrixRow1;\n  vec4 matrixRow2;\n  vec4 matrixRow3;\n};\nuniform LightingParam {\n  vec4 lightDirection;\n};\nuniform Turbulence {\n  vec4 overallColor;\n  float turbulenceSpeed;\n  float turbulenceAmplitude;\n  float turbulenceFrequency;\n  float turbulenceOctaves;\n  float turbulenceExp;\n  float turbulenceIntensity;\n  float colorIntensity;\n};\nvec2 turbulence(vec2 p)\n{\n    float freq = turbulenceFrequency;\n    mat2 rot = mat2(0.6, -0.8, 0.8, 0.6);\n    for(float i = 0.0; i < 20.0; i++)\n    {\n        if(i >= turbulenceOctaves) break;\n        float phase = freq * (p * rot).y + turbulenceSpeed * cc_time.x + i;\n        p += turbulenceAmplitude * rot[0] * sin(phase) / freq;\n        rot *= mat2(0.6, -0.8, 0.8, 0.6);\n        freq *= turbulenceExp;\n    }\n    return p;\n}\nvec3 rgb2hsv(vec3 rgb) {\n    float cmax = max(rgb.r, max(rgb.g, rgb.b));\n    float cmin = min(rgb.r, min(rgb.g, rgb.b));\n    float delta = cmax - cmin;\n    vec3 hsv = vec3(0.0);\n    if (delta > 0.0) {\n        if (cmax == rgb.r) {\n            hsv.x = mod((rgb.g - rgb.b) / delta, 6.0);\n        } else if (cmax == rgb.g) {\n            hsv.x = (rgb.b - rgb.r) / delta + 2.0;\n        } else {\n            hsv.x = (rgb.r - rgb.g) / delta + 4.0;\n        }\n        hsv.x /= 6.0;\n    }\n    hsv.y = (cmax > 0.0) ? delta / cmax : 0.0;\n    hsv.z = cmax;\n    return hsv;\n}\nvec3 hsv2rgb(vec3 hsv) {\n    float h = hsv.x * 6.0;\n    float s = hsv.y;\n    float v = hsv.z;\n    float c = v * s;\n    float x = c * (1.0 - abs(mod(h, 2.0) - 1.0));\n    float m = v - c;\n    vec3 rgb = vec3(0.0);\n    if (h < 1.0) {\n        rgb = vec3(c, x, 0.0);\n    } else if (h < 2.0) {\n        rgb = vec3(x, c, 0.0);\n    } else if (h < 3.0) {\n        rgb = vec3(0.0, c, x);\n    } else if (h < 4.0) {\n        rgb = vec3(0.0, x, c);\n    } else if (h < 5.0) {\n        rgb = vec3(x, 0.0, c);\n    } else {\n        rgb = vec3(c, 0.0, x);\n    }\n    return rgb + m;\n}\nvec3 generateProceduralColor(vec2 turbulentPos)\n{\n    vec3 baseColor = overallColor.rgb * colorIntensity;\n    vec3 hsv = rgb2hsv(baseColor);\n    float brightness = dot(cos(turbulentPos * 3.0), sin(-turbulentPos.yx * 3.0 * 0.618)) + 2.0;\n    float originalValue = hsv.z;\n    const float brightenRange = 0.15;\n    const float darkenRange = 0.05;\n    float minValue = max(0.1, originalValue - darkenRange);\n    float maxValue = min(1.0, originalValue + brightenRange);\n    float normalizedBrightness = clamp((brightness - 2.0) / 2.0, -1.0, 1.0);\n    float adjustedValue;\n    if (normalizedBrightness >= 0.0) {\n        adjustedValue = originalValue + normalizedBrightness * brightenRange;\n    } else {\n        adjustedValue = originalValue + normalizedBrightness * darkenRange;\n    }\n    hsv.z = clamp(adjustedValue, minValue, maxValue);\n    return hsv2rgb(hsv);\n}\nfloat calculateLighting(vec3 spherePos)\n{\n    vec3 normal = normalize(spherePos);\n    vec3 lightDir = normalize(lightDirection.xyz);\n    float lightIntensity = dot(normal, lightDir);\n    const float ambientLight = 0.2;\n    const float shadowStrength = 1.0;\n    float smoothLighting = smoothstep(-0.2, 0.3, lightIntensity);\n    float finalLighting = ambientLight + smoothLighting * shadowStrength;\n    return finalLighting;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 xy = v_uv0 * 2.0 - 1.0;\n  float len = length(xy);\n  if (len > 1.0) {\n    discard;\n  }\n  float z = sqrt(1.0 - len * len);\n  vec3 spherePos = vec3(xy, z);\n  mat4 b_matrix = mat4(matrixRow0, matrixRow1, matrixRow2, matrixRow3);\n  vec4 rotatePos = b_matrix * vec4(spherePos, 1.0);\n  vec3 p3d = rotatePos.xyz;\n  vec2 centeredCoord = p3d.xy * turbulenceIntensity;\n  vec2 turbulentPos = turbulence(centeredCoord);\n  vec3 proceduralColor = generateProceduralColor(turbulentPos);\n  float lightingFactor = calculateLighting(spherePos);\n  vec3 litColor = proceduralColor * (0.7 + 0.3 * lightingFactor);\n  o = vec4(litColor, 1.0);\n  o *= v_color;\n  ALPHA_TEST(o);\n  float alpha = smoothstep(1.0, 0.9, len);\n  o.a *= alpha;\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}