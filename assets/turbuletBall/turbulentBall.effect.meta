{
  "ver": "1.0.27",
  "uuid": "8667806d-92cf-436b-be56-65693df0e184",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec4 matrixRow0;\nuniform vec4 matrixRow1;\nuniform vec4 matrixRow2;\nuniform vec4 matrixRow3;\nuniform vec4 overallColor;\nuniform float turbulenceSpeed;\nuniform float turbulenceAmplitude;\nuniform float turbulenceFrequency;\nuniform float turbulenceOctaves;\nuniform float turbulenceExp;\nuniform float turbulenceIntensity;\nuniform float colorIntensity;\nvec2 turbulence(vec2 p)\n{\n    float freq = turbulenceFrequency;\n    mat2 rot = mat2(0.6, -0.8, 0.8, 0.6);\n    for(float i = 0.0; i < 20.0; i++)\n    {\n        if(i >= turbulenceOctaves) break;\n        float phase = freq * (p * rot).y + turbulenceSpeed * cc_time.x + i;\n        p += turbulenceAmplitude * rot[0] * sin(phase) / freq;\n        rot *= mat2(0.6, -0.8, 0.8, 0.6);\n        freq *= turbulenceExp;\n    }\n    return p;\n}\nvec3 generateProceduralColor(vec2 turbulentPos)\n{\n    vec3 col = overallColor.rgb * colorIntensity;\n    float brightness = dot(cos(turbulentPos * 3.0), sin(-turbulentPos.yx * 3.0 * 0.618)) + 2.0;\n    col /= brightness;\n    col = vec3(1.0) - exp(-col);\n    return col;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 xy = v_uv0 * 2.0 - 1.0;\n  float len = length(xy);\n  if (len > 1.0) {\n    discard;\n  }\n  float z = sqrt(1.0 - len * len);\n  vec3 spherePos = vec3(xy, z);\n  mat4 b_matrix = mat4(matrixRow0, matrixRow1, matrixRow2, matrixRow3);\n  vec4 rotatePos = b_matrix * vec4(spherePos, 1.0);\n  vec3 p3d = rotatePos.xyz;\n  vec2 centeredCoord = p3d.xy * turbulenceIntensity;\n  vec2 turbulentPos = turbulence(centeredCoord);\n  vec3 proceduralColor = generateProceduralColor(turbulentPos);\n  o = vec4(proceduralColor, 1.0);\n  o *= v_color;\n  ALPHA_TEST(o);\n  float alpha = smoothstep(1.0, 0.9, len);\n  o.a *= alpha;\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform mat4Param {\n  vec4 matrixRow0;\n  vec4 matrixRow1;\n  vec4 matrixRow2;\n  vec4 matrixRow3;\n};\nuniform Turbulence {\n  vec4 overallColor;\n  float turbulenceSpeed;\n  float turbulenceAmplitude;\n  float turbulenceFrequency;\n  float turbulenceOctaves;\n  float turbulenceExp;\n  float turbulenceIntensity;\n  float colorIntensity;\n};\nvec2 turbulence(vec2 p)\n{\n    float freq = turbulenceFrequency;\n    mat2 rot = mat2(0.6, -0.8, 0.8, 0.6);\n    for(float i = 0.0; i < 20.0; i++)\n    {\n        if(i >= turbulenceOctaves) break;\n        float phase = freq * (p * rot).y + turbulenceSpeed * cc_time.x + i;\n        p += turbulenceAmplitude * rot[0] * sin(phase) / freq;\n        rot *= mat2(0.6, -0.8, 0.8, 0.6);\n        freq *= turbulenceExp;\n    }\n    return p;\n}\nvec3 generateProceduralColor(vec2 turbulentPos)\n{\n    vec3 col = overallColor.rgb * colorIntensity;\n    float brightness = dot(cos(turbulentPos * 3.0), sin(-turbulentPos.yx * 3.0 * 0.618)) + 2.0;\n    col /= brightness;\n    col = vec3(1.0) - exp(-col);\n    return col;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 xy = v_uv0 * 2.0 - 1.0;\n  float len = length(xy);\n  if (len > 1.0) {\n    discard;\n  }\n  float z = sqrt(1.0 - len * len);\n  vec3 spherePos = vec3(xy, z);\n  mat4 b_matrix = mat4(matrixRow0, matrixRow1, matrixRow2, matrixRow3);\n  vec4 rotatePos = b_matrix * vec4(spherePos, 1.0);\n  vec3 p3d = rotatePos.xyz;\n  vec2 centeredCoord = p3d.xy * turbulenceIntensity;\n  vec2 turbulentPos = turbulence(centeredCoord);\n  vec3 proceduralColor = generateProceduralColor(turbulentPos);\n  o = vec4(proceduralColor, 1.0);\n  o *= v_color;\n  ALPHA_TEST(o);\n  float alpha = smoothstep(1.0, 0.9, len);\n  o.a *= alpha;\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}